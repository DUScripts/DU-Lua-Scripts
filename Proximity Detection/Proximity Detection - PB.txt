{"slots":{"0":{"name":"SysData","type":{"events":[],"methods":[]}},"1":{"name":"OrgData","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"DBKeys = json.decode(SysData.getKeys())\nlocal NameRecorded = 0\nlocal MplayerID = player.getId()\nlocal MplayerName = player.getName()\nlocal MplayerMass = player.getNanopackMass()\nlocal MplayerVolume = player.getNanopackVolume()\nlocal MplayerMaxVolume = player.getNanopackMaxVolume()\nlocal MplayerWrldPos = player.getWorldPosition()\nlocal MplayerWrldVelo = player.getWorldVelocity()\nlocal MplayerOrgIDs = player.getOrgIds()\nlocal MplayerTime = system.getUtcTime()\nlocal MplayerTimeOffset = system.getUtcOffset()\n\nlocal MplayerParentID = player.getParent()\nlocal MplayerIsSeated = player.isSeated()\nlocal MplayerSeatID = player.getSeatId()\nlocal MplayerSprinting = player.isSprinting()\nlocal MplayerIsJetpackOn = player.isJetpackOn()\nlocal MplayerIsHeadlightOn = player.isHeadlightOn()\n\nfunction DumpTable(o)\n   if type(o) == 'table' then\n      local s = '{ '\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..'] = ' .. DumpTable(v) .. ','\n      end\n      return s .. '} '\n   else\n      return tostring(o)\n   end\nend\n\nfunction TableConstructor(plname,plmass,plvol,plvolmax,plorgs,logtime,logtimeoff,plwpos,plwvelo,plparent,plisseated,plseatid,plsprint,pljetpack,plheadlight)\n    local NewTable = {name = plname, mass = plmass, volume = plvol, volumemax = plvolmax, orgs = plorgs, time = logtime, timeoffset = logtimeoff, pos = plwpos, velo = plwvelo, parent = plparent, seated = plisseated, seatid = plseatid, sprint = plsprint, jetpack = pljetpack, headlight = plheadlight}\n    return NewTable\nend\n\nfor k, v in pairs(MplayerOrgIDs) do\n    local orginfo = database.getOrganization(v)\n    OrgData.setStringValue(v,DumpTable(orginfo))\nend\n\nfor key, value in pairs(DBKeys) do\n    if MplayerID == value then\n        NameRecorded = 1\n    end\nend\n--if NameRecorded == 0 then\nSysData.setStringValue(MplayerID,DumpTable(TableConstructor(MplayerName,MplayerMass,MplayerVolume,MplayerMaxVolume,MplayerOrgIDs,MplayerTime,MplayerTimeOffset,MplayerWrldPos,MplayerWrldVelo,MplayerParentID,MplayerIsSeated,MplayerSeatID,MplayerSprinting,MplayerIsJetpackOn,MplayerIsHeadlightOn)))\n--end\nunit.exit()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}
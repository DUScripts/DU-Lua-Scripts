if not Slider then


    -- Returns a new slider class
    Slider = {}
    Slider.__index = Slider
    function Slider:new(x, y, width, length, min, max, value, label)
        self = {
            x = x or 0,
            y = y or 0,
            l = length or 100,
            w = width or 20,
            min = min or 0,
            max = max or 1,
            ratio = 0,
            label = label or "",
            drag = false,
            color = {1,1,1}
        }
        self.ratio = math.max(0, math.min(1, (value or self.min)/(self.max-self.min)))

        -- Set the value of the slider
        function self:setValue(val)
            if type(val) == 'number' then
                self.value = math.max(self.min, math.min(self.max, val))
            end
        end

        -- Get the value of the slider
        function self:getValue(val)
            return self.ratio*(self.max - self.min) + self.min
        end

        -- Draws the slider on the screen using the given layer
        function self:draw(layer)
            -- Localize object data
            local x, y, w, l = self.x, self.y, self.w, self.l
            local min, max, ratio = self.min, self.max

            local font = loadFont('Play', 14)

            -- Get cursor data
            local mx, my = getCursor()
            local pressed = getCursorPressed()
            local released = getCursorReleased()

            -- Determine if the cursor is on the bar and detect if the mouse is down
            if (mx >= x and mx <= x+w) and (my >= y and my <= y+l) then

                if pressed then self.drag = true end
            end

            -- Set the ratio based on the cursor position
            if self.drag then
                self.ratio = math.max(0, math.min(1, 1 - (my-y)/l))
                if released then
                    self.drag = false
                end
            end

            local ratio = self.ratio
            local h = ratio*(max-min)
            local color = self.color

            -- Draw the slider
            setDefaultStrokeColor(layer, Shape_BoxRounded, 1, 1, 1, 1)
            setDefaultStrokeWidth(layer, Shape_BoxRounded, 0.1)

            setNextFillColor(layer, 0.1, 0.1, 0.1, 1)
            addBoxRounded(layer, x, y, w, l, 0)

            setNextFillColor(layer, color[1], color[2], color[3], 1)
            addBoxRounded(layer, x, y+(1-ratio)*l, w, l*ratio, 0)

            setNextFillColor(layer, 0.5, 0.5, 0.5, 1)
            addBoxRounded(layer, x-3, y+(1-ratio)*l -3, w+6, 6, 0)

            -- Draw label and value display
            local label = self.label
            setNextTextAlign( layer, AlignH_Center, AlignV_Middle)
            addText( layer, font, label, x+0.5*w, y-14)

            local display = string.format('%.0f', math.floor(((ratio*(max - min) + min)*255)+0.5))
            setNextTextAlign( layer, AlignH_Center, AlignV_Middle)
            addText( layer, font, display, x+0.5*w, y+l+14)
        end


        return setmetatable(self, Slider)
    end

end

if not init then
    l3fontsize = 20
    l2fontsize = 30
    l1fontsize = 40
    l3xoffset = -20
    l3yoffset = 0
    l2xoffset = -20
    l2yoffset = 0
    l1xoffset = -20
    l1yoffset = 0
    brushr = 0.5
    brushg = 0.2
    brushb = 0.7
    showmenu = 0
    fontL = loadFont("Play", l1fontsize)
    rr = 8
    rx, ry = getResolution()
    cx1, cy1 = rx/rr, ry/rr
    mem1 = {}
    mem2 = {}
    mem3 = {}
    charset = "0123456789ABCDEF"
    for ix=1,cx1 do
        mem1[ix] = {}
        for iy=1,cy1 do
            mem1[ix][iy] = 0
        end
    end
    for ix2=1,cx1 do
        mem2[ix2] = {}
        for iy2=1,cy1 do
            mem2[ix2][iy2] = 0
        end
    end
    for ix3=1,cx1 do
        mem3[ix3] = {}
        for iy3=1,cy1 do
            mem3[ix3][iy3] = 0
        end
    end
    maxcost = getRenderCostMax()
    local r, g, b = 0.5, 0.5, 0.5

    sliderRed = Slider:new(rx*0.8, ry*0.2, 16, ry*0.6, 0, 1, r, "Red")
    sliderRed.color = { 1, 0, 0}
    sliderGreen = Slider:new(rx*0.85, ry*0.2, 16, ry*0.6, 0, 1, g, "Green")
    sliderGreen.color = { 0, 1, 0}
    sliderBlue = Slider:new(rx*0.9, ry*0.2, 16, ry*0.6, 0, 1, b, "Blue")
    sliderBlue.color = { 0, 0, 1}
    
    init = true
end


fontL = loadFont("Play", l1fontsize)
layer1 = createLayer()
layer2 = createLayer()
cursorx, cursory = getCursor()
curx2 = math.floor(cursorx/rr)
cury2 = math.floor(cursory/rr)

function DrawAllPixelsL1()
    for bx=1,cx1 do
        currcost = getRenderCost()
        if currcost < (maxcost*0.9) then
            for by=1,cy1 do
                setNextFillColor(layer1, mem1[bx][by], mem2[bx][by], mem3[bx][by], 1)
                addBox(layer1, bx*rr, by*rr, rr,rr)
            end
        end
    end
end

function DrawUI()
    if showmenu == 1 then
        sliderRed:draw(layer2)
        sliderGreen:draw(layer2)
        sliderBlue:draw(layer2)
        brushr = sliderRed.ratio
        brushg = sliderGreen.ratio
        brushb = sliderBlue.ratio
        
        setNextStrokeWidth(layer2, 5)
        setNextStrokeColor(layer2, 1, 0, 0, 1)
        setNextFillColor(layer2, 0.5,0.5,0.5, 1)
        addBox(layer2, rx*0.875, ry*0.08, rx*0.04, ry*0.06)
        
        if cursorx > rx*0.875 and cursorx < (rx*0.875)+(rx*0.04) then
            if cursory > ry*0.08 and cursory < (ry*0.08)+(ry*0.06) then
                setNextStrokeWidth(layer2, 5)
                setNextStrokeColor(layer2, 1, 0, 0, 1)
                setNextFillColor(layer2, 1,0.5,0.5, 1)
                addBox(layer2, rx*0.875, ry*0.08, rx*0.04, ry*0.06)
                if getCursorDown() then
                    showmenu = 0
                end
            end
        end
    else
        setNextFillColor(layer2, brushr, brushg, brushb, 1)
        addBox(layer2, 0, ry - 20, rx, 20)
        if getCursorDown() then
            if curx2 > 0 and cury2 > 0 then
                if curx2 < rx and cury2 < ry then
                    if cursory < ry and cursory > (ry - 20) then
                        showmenu = 1
                    else
                        mem1[curx2][cury2] = brushr
                        mem2[curx2][cury2] = brushg
                        mem3[curx2][cury2] = brushb
                    end
                end
            end
        end
    end
end

DrawAllPixelsL1()
DrawUI()

requestAnimationFrame(1)
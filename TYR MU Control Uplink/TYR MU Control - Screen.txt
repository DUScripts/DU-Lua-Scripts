if not init then
    init = true
    freshinit = true
    showimgbg = 1
    showdevoverlay = 0
    showactivationscreen = 1
    tickcount = 0
    maxtickcount = 8
    animtick = 0
    animtick2 = 0
    animtick2switch = 0
    animtick3 = 0
    animtick3max = 100
    lastinput = ""
    rx, ry = getResolution()
    a = 2 * math.pi / 6
    r = 100
    maxMUs = 7
    maxMUdatarows = 12
    tieravgs = {}
    tieravgs["1"] = 20
    tieravgs["2"] = 35
    tieravgs["3"] = 45
    tieravgs["4"] = 150
    tieravgs["5"] = 825
    calibrationcost = 150000
    calibrationsperweek = 1
    tiletax = 500000
    warpcellprice = 7000
    hauldistance = 500
    haulermass = 1500
    uplinkenabled = 1
    uplinkpress = 0
    multitablestate = 1
    contexttext = ""
    mem1 = {}
    for ix=1,maxMUs do
        mem1[ix] = {}
        for iy=1,maxMUdatarows do
            mem1[ix][iy] = 0
        end
    end
end
local fontXL = loadFont("Play", 60)
local fontXLb = loadFont("Play-Bold", 60)
local fontL = loadFont("Play", 40) --unused
local fontLb = loadFont("Play-Bold", 40)
local fontM = loadFont("Play", 20)
local fontMb = loadFont("Play-Bold", 20) --unused
local fontM2 = loadFont("Play", 16)
local fontS = loadFont("Play", 14) --unused
local layer = createLayer()
local layer2 = createLayer()
local layer3 = createLayer()
local layer4 = createLayer()
local devlayer = createLayer()
local rx, ry = getResolution()
local cx, cy = getCursor()
local cd = getCursorDown()
local cp = getCursorPressed()
local cr = getCursorReleased()
local colorPrimaryR = 1
local colorPrimaryG = 1
local colorPrimaryB = 1
local colorSecondaryR = 0
local colorSecondaryG = 0
local colorSecondaryB = 0
local colorTertiaryR = 0.1
local colorTertiaryG = 0.1
local colorTertiaryB = 0.4
local colorQuaternaryR = 0.05
local colorQuaternaryG = 0.05
local colorQuaternaryB = 0.05
local rcmax = getRenderCostMax()
local rccurr = getRenderCost()
local tilevalue = 0
local tilecost = 0
contexttext = ""
setBackgroundColor(colorQuaternaryR, colorQuaternaryG, colorQuaternaryB)

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end

function addHexagon(inlayer,hexx,hexy,tick,strkwdth,sr,sg,sb,shwdth,shr,shg,shb,alpha)
    -- tick = radius
    for ia=0,5 do
        setNextShadow(inlayer,shwdth,shr,shg,shb,alpha)
        setNextStrokeWidth(inlayer,strkwdth)
        setNextStrokeColor(inlayer,sr,sg,sb,alpha)
        addLine(inlayer,hexx + (r + tick) * math.cos(a * ia), hexy + (r + tick) * math.sin(a * ia),hexx + (r + tick) * math.cos(a * (ia+1)), hexy + (r + tick) * math.sin(a * (ia+1)))
    end
end

function drawBoxAnimation(tickin,layerin,xin,yin,sxin,syin,estate)
    local pcnt1 = tickin/animtick3max
    local pcnt2 = (tickin/2)/animtick3max
    if pcnt1 > 0.5 then
        pcnt2 = ((animtick3max - tickin)/2)/animtick3max
    end
    
    setNextStrokeWidth(layer3,0)
    setNextStrokeColor(layer3,0,0,0,0)
    setNextShadow(layer3,10,1,1,1,0.2)
    setNextFillColor(layer3,1,1,1,0.2)
    addBox(layer3,tempx+((rx*0.22)*pcnt1),tempy+(ry*0.035*2)-25,(rx*0.22)*pcnt2,15)
end

function drawUplinkWidget(drawlayer,strkwdth,width,height,xin,yin)
    --addHexagon(layer3,xin,yin,-20,2,0.5,0.5,0.5,15,0,0,0,0.7)
    local wgtr = 0.2
    local wgtg = 0.2
    local wgtb = 0.2
    local wgtstatus = ""
    if uplinkenabled == 1 then
        wgtg = 0.7
        wgtstatus = "Enabled"
    else
        wgtr = 0.7
        wgtstatus = "Disabled"
    end
    setNextShadow(drawlayer,strkwdth*3,0,0,0,0.7)
    setNextFillColor(drawlayer,wgtr,wgtg,wgtb,0.4)
    addCircle(drawlayer,xin,yin,strkwdth*2)
    setNextStrokeWidth(drawlayer,strkwdth)
    setNextShadow(drawlayer,strkwdth*3,0,0,0,0.7)
    setNextStrokeColor(drawlayer,wgtr,wgtg,wgtb,0.85)
    addBezier(drawlayer,xin-(width/2),yin-(height/4),xin,yin-(height/4)-25,xin+(width/2),yin-(height/4))
    setNextStrokeWidth(drawlayer,strkwdth)
    setNextShadow(drawlayer,strkwdth*3,0,0,0,0.7)
    setNextStrokeColor(drawlayer,wgtr,wgtg,wgtb,0.85)
    addBezier(drawlayer,xin-((width/3)*2),yin-((height/4)*2),xin,yin-((height/4)*2)-30,xin+((width/3)*2),yin-((height/4)*2))
    setNextStrokeWidth(drawlayer,strkwdth)
    setNextShadow(drawlayer,strkwdth*3,0,0,0,0.7)
    setNextStrokeColor(drawlayer,wgtr,wgtg,wgtb,0.85)
    addBezier(drawlayer,xin-((width/4)*3.3),yin-((height/4)*3),xin,yin-((height/4)*3)-35,xin+((width/4)*3.3),yin-((height/4)*3))
    setNextFillColor(drawlayer,wgtr,wgtg,wgtb,0.6)
    setNextTextAlign(drawlayer,AlignH_Center,AlignV_Middle)
    addText(drawlayer,fontM,"Uplink:",xin,yin+25)
    setNextFillColor(drawlayer,wgtr,wgtg,wgtb,0.6)
    setNextTextAlign(drawlayer,AlignH_Center,AlignV_Middle)
    addText(drawlayer,fontM,wgtstatus,xin,yin+45)
    if cx > xin-width then
        if cx < xin+width then
            if cy > yin-height then
                if cy < yin+height then
                    if uplinkenabled == 1 then
                        contexttext = "Click to Disable."
                    else
                        contexttext = "Click to Enable."
                    end
                    if cp == true then
                        uplinkpress = 1
                    end
                    if cr == true and uplinkpress == 1 then
                        if uplinkenabled == 1 then
                            uplinkenabled = 0
                        else
                            uplinkenabled = 1
                        end 
                    end
                end
            end
        end
    end
    uplinkpress = 0
end

function DrawTYRFooter()
    --If you modify our script, please leave this intact
    setNextFillColor(layer4, 1, 1, 1, 0.1)
    addText(layer4, fontS, "Developed by TYR Expeditionary Group", rx*0.65, ry - 15)
    setNextFillColor(layer4, 1, 1, 1, 0.2)
    addText(layer4, fontS, "Developed by TYR Expeditionary Group", rx*0.65 - 2, ry - 15 - 2)
end

function drawHexWidget1(tick)
    addHexagon(layer3,680,200,15,4,0.5,0.5,0.5,15,0,0,0,0.7)
    addHexagon(layer3,680,200,-20,2,0.3,0.3,0.3,8,0,0,0,0.7)
    addHexagon(layer3,680,200,-55,2,0.3,0.3,0.3,8,0,0,0,0.7)
    addHexagon(layer3,680,200,-90,1,0.5,0.5,0.5,4,0,0,0,0.7)
    setNextShadow(layer3,4,0,0,0,0.5)
    setNextStrokeWidth(layer3,2)
    setNextStrokeColor(layer3,0.2,0.2,0.2,0.7)
    addLine(layer3,795,200,565,200)
    setNextShadow(layer3,4,0,0,0,0.5)
    setNextStrokeWidth(layer3,2)
    setNextStrokeColor(layer3,0.2,0.2,0.2,0.7)
    addLine(layer3,735,300,625,100)
    setNextShadow(layer3,4,0,0,0,0.5)
    setNextStrokeWidth(layer3,2)
    setNextStrokeColor(layer3,0.2,0.2,0.2,0.7)
    addLine(layer3,735,100,625,300)
    addHexagon(layer3,680,200,15-tick,1,0.3,0.5,0.9,4,0.4,0.4,0.4,0.3)
end

function drawMUWidget1(tickin)
    local alph1 = tickin/50
    --draw MU Script Image Assets
    setNextFillColor(layer3,0.7,0.7,0.7,alph1)
    addImageSub(layer3,assetimagehandle,900,355,77.5,212.5,0,0,155,425)
end

function drawCircularProgressBar(layerin,xin,yin,rad,v)
    local prcnt = v/86400
    local angle = prcnt*360
    local cntr = 0
    if v > 86400 then
        if v > 259200 then
            --losing calibration
            setNextFillColor(layer3,1,0,0,0.5)
            addTriangle(layer3,tempx+255,tempy+(ry*0.035*2)-40,tempx+275,tempy+(ry*0.035*2)-40,tempx+265,tempy+(ry*0.035*2)-15)
        else
            --calibration timer reset, but not losing calibration
            setNextFillColor(layer3,1,1,0,0.5)
            addCircle(layer3,tempx+265,tempy+(ry*0.035*2)-30,8)
        end
    else
        for xb = 1,20 do
            cntr = cntr + 0.05
            setNextStrokeWidth(layerin,1)
            setNextStrokeColor(layerin,0,0,0,0)
            setNextFillColor(layerin,0,0.2,0.7,0.5)
            addCircle(layerin,xin+(math.cos((prcnt*cntr)*(math.pi*2))*rad),yin+(math.sin((prcnt*cntr)*(math.pi*2))*rad),5)
        end
        --center circle
        setNextStrokeWidth(layerin,2)
        setNextStrokeColor(layerin,0,0,0,0)
        setNextFillColor(layerin,0.5,0.5,0.5,0.7)
        addCircle(layerin,xin,yin,rad/2+(rad/4))
        --outer circle
        setNextStrokeWidth(layerin,3)
        setNextStrokeColor(layerin,0.5,0.5,0.5,0.7)
        setNextFillColor(layerin,0,0,0,0)
        addCircle(layerin,xin,yin,rad+(rad/3))
        --position circle
        setNextStrokeWidth(layerin,1)
        setNextStrokeColor(layerin,0.5,0.5,0.5,0.7)
        setNextFillColor(layerin,0.5,0.5,0.5,0.7)
        addCircle(layerin,xin+(math.cos(prcnt*(math.pi*2))*rad),yin+(math.sin(prcnt*(math.pi*2))*rad),5)
    end
    --context menu
    if cx > xin-(rad*1.5) then
        if cx < xin+(rad*1.5) then
            if cy > yin-(rad*1.5) then
                if cy < yin+(rad*1.5) then
                    if v > 86400 then
                        if v > 259200 then
                            contexttext = "Unit is losing calibration. (72Hrs+)"
                        else
                            contexttext = "Calibration Ready."
                        end
                    else
                        contexttext = "Calibration Available in " .. 24 - round(24*prcnt,1) .. " hours."
                    end
                end
            end
        end
    end
end

function DrawMultiTableFrame()
    setNextStrokeWidth(layer3,3)
    setNextStrokeColor(layer3,0.3,0.3,0.3,1)
    setNextFillColor(layer3,0,0,0,0)
    addLine(layer3,570,353,723,353)
    
    setNextStrokeWidth(layer3,3)
    setNextStrokeColor(layer3,0.3,0.3,0.3,1)
    setNextFillColor(layer3,0,0,0,0)
    addLine(layer3,570,360,875,360)
    
    setNextStrokeWidth(layer3,3)
    setNextStrokeColor(layer3,0.3,0.3,0.3,1)
    setNextFillColor(layer3,0,0,0,0)
    addLine(layer3,570,353,570,460)
    
    setNextStrokeWidth(layer3,3)
    setNextStrokeColor(layer3,0.3,0.3,0.3,1)
    setNextFillColor(layer3,0,0,0,0)
    addLine(layer3,577,360,577,560)
end

function DrawEstimationsTable(tempx, tempy, tilevalue, tilecost)
    setNextFillColor(layer3,0.8,0.8,0.2,0.7)
    addText(layer3, fontM, "Estimations:", tempx+550,340)
    
    setNextFillColor(layer3,0.5,0.5,0.5,0.7)
    addText(layer3, fontM2, "Yield Value: " .. tilevalue .. " h per week", tempx+550,380)
    
    setNextFillColor(layer3,0.7,0.2,0.2,0.7)
    addText(layer3, fontM2, "Tile Cost: " .. (tilecost * calibrationsperweek) + tiletax .. " h per week", tempx+550,400)
    setNextFillColor(layer3,0.5,0.5,0.5,0.7)
    addText(layer3, fontM2, tilecost .. " x " .. calibrationsperweek .. " + " .. tiletax , tempx+550,420)
    
    setNextFillColor(layer3,0.7,0.2,0.2,0.7)
    addText(layer3, fontM2, "Transport Cost: " .. math.ceil(haulermass * hauldistance * 0.00025)*warpcellprice .. " h per haul", tempx+550,460)
    setNextFillColor(layer3,0.5,0.5,0.5,0.7)
    addText(layer3, fontM2, "(" .. haulermass .. " x " .. hauldistance .. " x 0.00025) x ".. warpcellprice, tempx+550,480)
    
    local wklyprfts = tilevalue - ((tilecost * calibrationsperweek) + tiletax)
    local tileappraisal = (((wklyprfts * 2) - (math.ceil(haulermass * hauldistance * 0.00025)*warpcellprice))*2)*3
    if wklyprfts > 0 then
        setNextFillColor(layer3,0.2,0.7,0.2,0.7)
    else
        setNextFillColor(layer3,0.7,0.2,0.2,0.7)
    end
    addText(layer3, fontM2, "Weekly Profit: " .. wklyprfts .. " h per week", tempx+550,520)
    if tileappraisal > 0 then
        setNextFillColor(layer3,0.2,0.2,0.7,0.7)
    else
        setNextFillColor(layer3,0.7,0.2,0.2,0.7)
    end
    addText(layer3, fontM2, "Tile Value: " .. tileappraisal .. " h after 3 months", tempx+550,560)
end

function DrawCalibrationTable(tempx, tempy, tilevalue, tilecost)
    setNextFillColor(layer3,0.8,0.8,0.2,0.7)
    addText(layer3, fontM, "Calibrations:", tempx+550,340)
    for xxb=1,10 do
        setNextFillColor(layer3,0.5,0.5,0.5,0.7)
        addText(layer3, fontM2, "Epicphail - 57879 - MU1 - 65% - 3120.0 L", tempx+550,380+((xxb - 1)*20))
    end
end

assetimagehandle = loadImage("assets.prod.novaquark.com/66839/49273f08-d4ab-4e33-a5a1-c105b051b587.png")
local bgimg1 = loadImage("assets.prod.novaquark.com/66839/022069f8-6b81-42ac-8623-c3514f0b567b.png")
local bgimg2 = loadImage("assets.prod.novaquark.com/66839/e62c54b7-89ff-45ca-9bfe-30c320b66533.png")

if showimgbg == 1 then
    if showactivationscreen == 0 then
        addImage(layer, bgimg2, 0, 0, rx, ry)
        setNextFillColor(layer, 0, 0, 0, 0.75)
        addBox(layer,0,0,rx,ry)
    else
        addImage(layer, bgimg1, 0, 0, rx, ry)
    end
else
    setNextFillColor(layer, 0, 0, 0, 1)
    addBox(layer,0,0,rx,ry)
end

if getInput() then
    if getInput() == lastinput then
        --do nothing
    else
        local inputstr = getInput()
        local passed = 0
        local fullpass = 0
        if inputstr == "clear" or inputstr == nil then
            --clear the mem array
            for ix=1,maxMUs do
                mem1[ix] = {}
                for iy=1,maxMUdatarows do
                    mem1[ix][iy] = 0
                end
            end
            tickcount = 0
            showactivationscreen = 1
            fullpass = 1
        else
            if inputstr == "refresh" then
                tickcount = 1
                showactivationscreen = 0
                fullpass = 1
            else
                if inputstr == "empty" then
                    passed = 1
                end
            end
        end
        if passed == 0 and fullpass == 0 then
            showactivationscreen = 0
            --for ix2=1,maxMUs do
            --check if there's somthing stored in this row already, if so pass, but only do this once for each input
            if tickcount < (maxtickcount + 1) then
                local inputstr2 = ""
                for iy2=1,maxMUdatarows do
                    if inputstr ~= nil and inputstr ~= "" then
                        if iy2 == maxMUdatarows then
                            inputstr2 = string.sub(inputstr,1,string.len(inputstr))
                            inputstr = ""
                        else
                            inputstr2 = string.sub(inputstr,1,string.find(inputstr,",") - 1)
                            inputstr = string.sub(inputstr,string.find(inputstr,",")+1,string.len(inputstr))
                        end
                        mem1[tickcount - 1][iy2] = inputstr2
                    end
                end
            end
            tickcount = tickcount + 1
            setOutput("Ack" .. tickcount)
            lastinput = getInput()
        end
        if passed == 1 then
            tickcount = tickcount + 1
            setOutput("Ack" .. tickcount)
            lastinput = getInput()
        end
        if fullpass == 1 then
            tickcount = tickcount + 1
            setOutput("Ack" .. tickcount)
            lastinput = getInput()
        end
        if tickcount > maxtickcount then
            tickcount = 1
        end
    end
else
    setOutput("")
end

if showactivationscreen == 0 then
    setNextFillColor(layer2, 0,0,0,0.6)
    addBox(layer2,0,0,rx,ry)

    setNextFillColor(layer3, 0,0,0,0.6)
    setNextShadow(layer3, 20,0,0,0,0.5)
    addBoxRounded(layer3,20,20,rx - 40,ry - 40,30)

    setNextFillColor(layer3,0.3,0.3,0.3,0.5)
    addText(layer3, fontLb, "[TYR] Mining Unit Control Uplink", rx*0.05,ry*0.1 )
    
    for ix3=1,maxMUs do
        tempx = (rx*0.18)-150
        tempy = (ry*0.12*ix3)+20
        if mem1[ix3][1] == 0 then
            --dont draw if empty
        else
            --draw MU status text
            local usrtext = mem1[ix3][1]
            local errstate = 0
            if usrtext == "RUNNING" then
                setNextFillColor(layer3,0.0,0.9,0.4,0.5)
            end
            if usrtext == "JAMMED_NO_OUTPUT_CONTAINER" then
                setNextFillColor(layer3,1,1,0,0.5)
                usrtext = "NO_OUTPUT"
                errstate = 3
            end
            if usrtext == "JAMMED_OUTPUT_FULL" then
                setNextFillColor(layer3,1,0.7,0,0.5)
                usrtext = "FULL"
                errstate = 2
            end
            if usrtext == "STOPPED" then
                setNextFillColor(layer3,1,0,0,0.5)
                errstate = 1
            end
            addText(layer3, fontM, usrtext, tempx+(rx*0.13),tempy)
            
            --draw MU title
            if errstate == 0 then
                setNextFillColor(layer3,0,0.4,0.9,0.5)
            else
                setNextFillColor(layer3,0.9,0.9,0,0.5)
            end
            addText(layer3, fontM, "MU #" .. ix3, tempx,tempy)

            --cycle bounding box
            setNextStrokeWidth(layer3,1)
            if errstate == 0 then
                setNextStrokeColor(layer3,0.3,0.3,0.3,1)
            else
                setNextStrokeColor(layer3,0.6,0.6,0.6,1)
            end
            setNextFillColor(layer3,0,0,0,0)
            addBox(layer3,tempx,tempy+(ry*0.035*1)-15,(rx*0.22),5)
            --cycle progress
            local prcnt = round(1 - (mem1[ix3][2] / 3600), 2)
            if errstate == 0 then
                setNextFillColor(layer3,0,0.4,0.8,0.7)
            else
                setNextFillColor(layer3,0.8,0.1,0.1,0.7)
            end
            addBox(layer3,tempx,tempy+(ry*0.035*1)-15,(rx*0.22)*prcnt,5)


            if mem1[ix3][3] == "ib_invaliditem_displayname" then
                --do nothing
            else
                --display icon
                local newimagehandle = loadImage(mem1[ix3][4])
                addImage(layer3, newimagehandle, tempx+295, tempy - 10, 50, 50)
                setNextFillColor(layer3,0.8,0.8,0.2,0.7)
                addText(layer3, fontM, mem1[ix3][3], tempx+355,tempy+15)
            end
            
            --production highlight animation (must be drawn before the box itself)
            animtick3 = animtick3 + 1
            if animtick3 > 100 then
                animtick3 = 1
            end
            drawBoxAnimation(animtick3,layer3,tempx,tempy+(ry*0.035*2)-25,(rx*0.22),15,errstate)
            
            --production bounding box
            setNextStrokeWidth(layer3,3)
            setNextStrokeColor(layer3,0.3,0.3,0.3,1)
            if errstate == 0 then
                setNextStrokeColor(layer3,0.3,0.3,0.3,1)
            else
                setNextStrokeColor(layer3,0.6,0.6,0.6,1)
            end
            setNextFillColor(layer3,0,0,0,0)
            addBox(layer3,tempx,tempy+(ry*0.035*2)-25,(rx*0.22),15)
            --production optimum rate
            setNextFillColor(layer3,0.4,0.4,0.4,0.4)
            addBox(layer3,tempx,tempy+(ry*0.035*2)-25,(rx*0.22)*mem1[ix3][9],15)
            --production current rate
            if errstate == 0 then
                setNextFillColor(layer3,0,0.4,0.8,0.7)
            else
                setNextFillColor(layer3,0.8,0.1,0.1,0.7)
            end
            addBox(layer3,tempx,tempy+(ry*0.035*2)-25,(rx*0.22)*mem1[ix3][8],15)
            setNextFillColor(layer3,0.6,0.6,0.6,0.5)
            addText(layer3, fontM, round(mem1[ix3][10],2) .. " L/h", tempx,tempy+(ry*0.035*2)-10)
            
            setNextFillColor(layer3,0.6,0.6,0.6,0.5)
            addText(layer3, fontM2, "+" .. mem1[ix3][7]*100 .. "% adj.", tempx+150,tempy+(ry*0.035*2)-10)
            
            --Draw icons to show calibration status
            drawCircularProgressBar(layer3,tempx+265,tempy+(ry*0.035*2)-30,15,round(mem1[ix3][11]))
            
            if mem1[ix3][1] == "RUNNING" then
                if mem1[ix3][12] == "" then
                    --Do Nothing
                else
                    setNextFillColor(layer3,0.6,0.6,0.6,0.5)
                    local minervalue = ((tieravgs[mem1[ix3][12]] * round(mem1[ix3][10],2)) * 24) * 7
                    tilevalue = tilevalue + minervalue
                    tilecost = tilecost + calibrationcost
                    addText(layer3, fontM2, minervalue .. " h per week", tempx+355,tempy+(ry*0.035*2)-10)
                end
            end
        end
    end
    
    animtick = animtick + 1
    if animtick > 230 then
        animtick = 1
    end
    drawHexWidget1(animtick)
    
    if animtick2switch == 0 then
        animtick2 = animtick2 + 1
    else
        animtick2 = animtick2 - 1
    end
    if animtick2 > 50 or animtick2 < 1 then
        if animtick2switch == 0 then
            animtick2switch = 1
        else
            animtick2switch = 0
        end
    end
    drawMUWidget1(animtick2)
    
    drawUplinkWidget(layer3,5,50,50,940,90)
    
    DrawMultiTableFrame()
    if multitablestate == 1 then
        DrawEstimationsTable(tempx, tempy, tilevalue, tilecost)
    end
    if multitablestate == 2 then
        DrawCalibrationTable(tempx, tempy)
    end
    DrawTYRFooter()
else
    --PB is deactivated, show activation prompt
    --setNextFillColor(layer2, 0,0,0,0.6)
    --addBox(layer2,0,0,rx,ry)

    setNextFillColor(layer2, 0.9, 0.9, 0.9, 1)
    setNextShadow(layer2, 20, 0, 0, 0, 0.85)
    addText(layer2, fontL, "Mining Unit Control Uplink", rx*0.205,ry*0.675 )
    
    setNextFillColor(layer2, 0.9, 0.7, 0, 0.75)
    addText(layer2, fontM, "Activate Programming Board to view status.", rx*0.205,ry*0.72 )
end



--draw cursor
if cx > 0 and cx < rx then
    if cy > 0 and cy < ry then
        setNextStrokeWidth(layer3,1)
        if cd == true then
            setNextStrokeColor(layer3,0.2,0.4,0.6,1)
        else
            setNextStrokeColor(layer3,0.5,0.5,0.5,1)
        end
        setNextFillColor(layer3,0,0,0,0)
        addCircle(layer3,cx,cy,8)
        setNextStrokeWidth(layer3,1)
        if cd == true then
            setNextStrokeColor(layer3,0.1,0.3,0.6,1)
        else
            setNextStrokeColor(layer3,0.5,0.5,0.5,1)
        end
        setNextFillColor(layer3,0,0,0,0)
        addCircle(layer3,cx,cy,2)
        if contexttext ~= "" then
            local bxwdth = (string.len(contexttext)*6)+10
            local xpos = cx+5
            if (cx + bxwdth) > rx then
                xpos = xpos - bxwdth
            end
            setNextStrokeWidth(layer3,3)
            setNextStrokeColor(layer3,0.0,0.2,0.5,0.8)
            setNextFillColor(layer3,0.2,0.2,0.2,0.7)
            addBox(layer3,xpos,cy+5,bxwdth,18)
            setNextFillColor(layer3,1,1,0,0.7)
            addText(layer3,fontS,contexttext,xpos+3,cy+18)
        end
    end
end


--Dev Overlay
if showdevoverlay == 1 then
    local cursp = 0
    if getCursorPressed() == false then cursp = 0 else cursp = 1 end
    local cursr = 0
    if getCursorReleased() == false then cursr = 0 else cursr = 1 end
    setNextFillColor(devlayer, 1, 0, 0, 1)
    addText(devlayer, fontM, "Mouse P/R: " .. cursp .. " / " .. cursr, rx*0.001, ry*0.12)
    setNextFillColor(devlayer, 1, 0, 0, 1)
    addText(devlayer, fontM, "Frame: " .. getDeltaTime(), rx*0.001, ry*0.08)
    setNextFillColor(devlayer, 1, 0, 0, 1)
    addText(devlayer, fontM, "Render Cost: " .. getRenderCost() .. " / " .. rcmax, rx*0.001, ry*0.03)
end

requestAnimationFrame(1)
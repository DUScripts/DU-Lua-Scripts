local atlas = require("atlas")
--user configurable variables
local bgplanet = 2
local planetsize = 400
local outlinecolor1R, outlinecolor1G, outlinecolor1B = 0, 1.5, 1.75
local outlinecolor2R, outlinecolor2G, outlinecolor2B = 0, 0.25, 0.5
local outlinecolor3R, outlinecolor3G, outlinecolor3B = 0, 0.25, 0.5
local textcolor1R, textcolor1G, textcolor1B = 1, 1, 1
local textcolor2R, textcolor2G, textcolor2B = 3, 3, 3
local spacebg = loadImage("assets.prod.novaquark.com/66839/ea555f35-0b6a-4c15-a4d4-d0d0b1e26927.png")
local drawspacebg = 1
--# Local rendering preparation
-- Create layers
local rear = createLayer()
local back = createLayer()
local front = createLayer()
local fore = createLayer()

local layer2 = createLayer()
local platetextsize = 200
local font1 = loadFont("Play",platetextsize)
local font2 = loadFont("Play",platetextsize/2)

local system = atlas[0]
local rx,ry = getResolution()

if drawspacebg == 1 then
    addImage(rear, spacebg, 0, 0, rx, ry)
end

local images = {}
local function loadImages(src)
    for k,img in pairs(images) do
        if k == src then return img end
    end
    images[src] = loadImage(src)
    return images[src]
end

local function contains(t, u)
    for i,v in pairs(t) do
        if v == u then return true, i end
    end
    return false
end

_planets = _planets or {}
local input, dist = getInput(), 0

if not _init then
    if not system[_select] then
        _select = 1
    end
    for _,b in pairs(system) do
        if b.systemId == 0 then
            if b.satellites then
                table.sort (b.satellites, function (b1, b2) return system[b1].positionInSystem < system[b1].positionInSystem end )
            end
            _planets[#_planets+1] = b
        end
    end
    table.sort (_planets, function (b1, b2) return b1.positionInSystem < b2.positionInSystem end )
    _init = true
end

local planet = system[_select]
local vignette = loadImages(planet.iconPath)


--- Draw all planets
for i,body in pairs(_planets) do
    -- For each planet load the icon from the atlas data
    if i == bgplanet then
        local img = loadImages(body.iconPath)
        local hover = false
        local r = planetsize
        local bx, by = 450,350
        local mbx = 224+(i*350)/6

        if body.hasAtmosphere then
            local atm = body.atmosphereRadius/900

            setNextStrokeWidth( rear, 0.1)
            setNextStrokeColor( rear, 1, 1, 1, 0.03)
            setNextShadow( rear, 80, 1, 1, 1, 0.035)
            setNextFillColor( rear, 1, 1, 1, 0.025)
            addCircle( rear, bx, by, r)
        end
        --Draw planet image
        addImage( back, img, bx-r, by-r, 2*r, 2*r)
        --draw border
        setNextShadow(fore,25,outlinecolor1R, outlinecolor1G, outlinecolor1B,1)
        setNextStrokeWidth(fore,5)
        setNextFillColor(fore,0,0,0,0)
        addBoxRounded(fore, 25, 25, rx - 50, ry - 50, 20)
        
        setNextShadow(fore,25,outlinecolor2R, outlinecolor2G, outlinecolor2B,1)
        setNextFillColor(fore,textcolor1R, textcolor1G, textcolor1B,1)
        local bndx,bndy = getTextBounds(font2,body.name[1])
        addText(fore,font2,body.name[1],rx/2-(bndx/2),ry/2-(bndy/2)-100)
    end
end

local baseCharacters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
local baseLength = #baseCharacters

local floor = math.floor
local abs = math.abs
local sub = string.sub
function baseEncode(x, base)
    assert(base, "Argument 2 missing or nil")
    assert(not (base > baseLength or base < 2), "Base not in range of 2 - " .. baseLength)
    local returnString = ""
    local negative = x < 0
    if negative then
        x = abs(x)
    end
    local i = 0
    local remainder
    while x ~= 0 do
        i = i + 1
        x, remainder = floor(x / base), x % base + 1
        returnString = sub(baseCharacters, remainder, remainder) .. returnString
    end
    return (negative and "-" or "") .. returnString
end
local find = string.find
function baseDecode(s, encodedBase)
    if encodedBase <= 36 then
        s = s:upper()
    end

    local positive = true
    if sub(s, 1, 1) == "-" then
        positive = false
        s = sub(s, 2, -1)
    end

    local returnNumber = 0
    local length = #s

    for i = 1, length do
        local currentCharacter = sub(s, i, i)
        local characterValue = (find(baseCharacters, currentCharacter) - 1) * encodedBase ^ (length - i)
        returnNumber = returnNumber + characterValue
    end
    return positive and returnNumber or -returnNumber
end
function convertBase(s, encodedBase, newBase)
    return baseEncode(baseDecode(s, encodedBase), newBase)
end
local platetext = convertBase(getInput(), 10, 36)
local bndw, bndh = getTextBounds(font1,platetext)
setNextShadow(layer2,50,outlinecolor3R, outlinecolor3G, outlinecolor3B,1)
setNextFillColor(layer2,textcolor2R, textcolor2G, textcolor2B,1)
addText(layer2,font1,platetext,rx/2-(bndw/2),(ry/2)+100)
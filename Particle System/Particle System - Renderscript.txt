if not init then
    maxparticles = 120
    particlespeed = 0.25
    velocitylimit = 5
    particles = {}
    for aa=1,maxparticles do
        particles[aa] = {}
        particles[aa][1] = math.random(1,1000)
        particles[aa][2] = math.random(1,600)
        local neg = math.random(1,2) - 1
        if neg == 0 then
            neg = -1
        end
        particles[aa][3] = math.random(1,100)/100 * neg
        neg = math.random(1,2) - 1
        if neg == 0 then
            neg = -1
        end
        particles[aa][4] = math.random(1,100)/100 * neg
        particles[aa][5] = 0
        particles[aa][6] = 0
    end
    -- xpos, ypos, xvec, yvec, 
    
    --particle behaviour
    edgebehaviour = 1
    gravity = 0
    attraction = 1
    attractdistance = 100
    connect = 1
    velolimiting = 1
    
    
    function DrawParticles()
        for ac=1,maxparticles do
            setNextFillColor(layer1,0.3,0,0.3,0.6)
            addCircle(layer1, particles[ac][1], particles[ac][2], 5)
        end
    end
    
    function UpdateParticles()
        for ac=1,maxparticles do
            if edgebehaviour == 1 then
                if particles[ac][1] > (rx - 10) then --right
                    particles[ac][3] = particles[ac][3] * -1
                end
                if particles[ac][1] < 10 then --left
                    particles[ac][3] = math.abs(particles[ac][3])
                end

                if particles[ac][2] < 10 then --top
                    particles[ac][4] = math.abs(particles[ac][4])
                end
                if particles[ac][2] > (ry - 10) then --bottom
                    particles[ac][4] = particles[ac][4] * -1
                end
            end
            if edgebehaviour == 2 then
                if particles[ac][1] > (rx - 10) then --right
                    particles[ac][1] = particles[ac][1] - rx
                end
                if particles[ac][1] < 10 then --left
                    particles[ac][1] = particles[ac][1] + rx
                end

                if particles[ac][2] < 10 then --top
                    particles[ac][2] = particles[ac][2] + ry
                end
                if particles[ac][2] > (ry - 10) then --bottom
                    particles[ac][2] = particles[ac][2] - ry
                end
            end
            if attraction == 1 or connect == 1 then
                for af=1,maxparticles do
                    if af ~= ac then
                        local tempx1 = particles[ac][1]
                        local tempx2 = particles[af][1]
                        local tempy1 = particles[ac][2]
                        local tempy2 = particles[af][2]
                        if math.abs(tempx2 - tempx1) < attractdistance then
                            if math.abs(tempy2 - tempy1) < attractdistance then
                                if connect == 1 then
                                    local dist1 = (tempx1 - tempx2)/attractdistance
                                    local dist2 = (tempy1 - tempy2)/attractdistance
                                    local distavg = (dist1 + dist2) / 2
                                    setNextStrokeColor(layer1,0.4+distavg,distavg,0.4-distavg,0.4+distavg)
                                    addLine(layer1,tempx1,tempy1,tempx2,tempy2)
                                end
                                if attraction == 1 then
                                    particles[ac][3] = particles[ac][3] - (((tempx2 - tempx1)/attractdistance)*0.05)
                                    particles[ac][4] = particles[ac][4] - (((tempy2 - tempy1)/attractdistance)*0.05)
                                end
                            end
                        end
                    end
                end
            end
            if velolimiting == 1 then
                if particles[ac][3] > velocitylimit then particles[ac][3] = velocitylimit end
                if particles[ac][3] < -velocitylimit then particles[ac][3] = -velocitylimit end
                if particles[ac][4] > velocitylimit then particles[ac][4] = velocitylimit end
                if particles[ac][4] < -velocitylimit then particles[ac][4] = -velocitylimit end
            end
            particles[ac][1] = particles[ac][1] + (particlespeed * particles[ac][3])
            particles[ac][2] = particles[ac][2] + (particlespeed * particles[ac][4])
        end
    end
    init = true
end
rx, ry = getResolution()
layer1 = createLayer()

UpdateParticles()
DrawParticles()

requestAnimationFrame(1)